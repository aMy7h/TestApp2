# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  
jobs:
     
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x] 

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: "14.x"
      - run: npm install
      - run: npm run build --if-present
      
  security:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Generate package.lock json
      run: npm i --package-lock-only
    - name: Find vulnerable packages
      run: npm audit
   
  deploy:
    runs-on: ubuntu-latest
    needs: security
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Download kubectl
      run: |
        apt update && apt -y install curl
        curl -LO https://dl.k8s.io/release/v1.23.0/bin/linux/amd64/kubectl
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin
        curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64
        chmod +x ./aws-iam-authenticator
        sudo mv aws-iam-authenticator /usr/local/bin
    - name: Copy kubectl to a file
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
      run: 'echo "$KUBECONFIG" > conf'
        
    - name: Deploy to kubernetes
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.SESSIONTOKEN }}
      run: |
        kubectl --kubeconfig conf get nodes
        export RAND=$RANDOM
        echo "Performing deployment of demonodejsapp3$RANDOM"
        kubectl --kubeconfig conf create deployment demonodejsapp3$RAND --image demonodejsapp3
        kubectl --kubeconfig conf expose deployment demonodejsapp3$RAND --port 80 --type LoadBalancer
        external_ip=""
        while [ -z $external_ip ]; do
          echo "Waiting for end point..."
          external_ip=$(kubectl --kubeconfig conf get svc demonodejsapp3$RAND --template="{{range .status.loadBalancer.ingress}}{{.ip}}{{end}}")
          [ -z "$external_ip" ] && sleep 10
        done
        echo 'End point ready:' && echo $external_ip
        kubectl --kubeconfig conf get svc demonodejsapp3$RAND
